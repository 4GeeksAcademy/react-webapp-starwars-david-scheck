================================================================
Repopack Output File
================================================================

This file was generated by Repopack on: 2024-09-04T23:59:52.969Z

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This header section
2. Repository structure
3. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
1. This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
2. When processing this file, use the separators and "File:" markers to
  distinguish between different files in the repository.
3. Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.



For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.devcontainer/
  devcontainer.json
docs/
  assets/
    greeting.py
src/
  js/
    component/
      styles/
        Navbar.module.css
        People.module.css
        Planets.module.css
        Vehicles.module.css
      Favorites.jsx
      Navbar.jsx
      People.jsx
      Planets.jsx
      Vehicles.jsx
    store/
      appContext.js
      flux.js
    views/
      CharacterDetails.js
      Home.js
      PlanetDetails.js
      VehicleDetails.js
    index.js
    layout.js
.env.example
.eslintrc
.gitignore
.gitpod.yml
.htaccess
CHANGELOG.md
package.json
README.md
template.html
vercel.json
webpack.common.js
webpack.dev.js
webpack.prod.js

================================================================
Repository Files
================================================================

================
File: .devcontainer/devcontainer.json
================
// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/javascript-node
{
	"name": "Node.js",
	// Or use a Dockerfile or Docker Compose file. More info: https://containers.dev/guide/dockerfile
	"image": "mcr.microsoft.com/devcontainers/python:0-3.10",
	"features": {
		"ghcr.io/devcontainers/features/node:1": {
			"nodeGypDependencies": true,
			"version": "16"
		}
	},

	"customizations": {
		"vscode": {
			"settings": {
				"editor.defaultFormatter": "esbenp.prettier-vscode",
				"workbench.editorAssociations": {   
					"*.md": "vscode.markdown.preview.editor"
				}
			},
		}
	},

	"onCreateCommand": "npm install && cp .env.example .env",

	// Features to add to the dev container. More info: https://containers.dev/features.
	// "features": {},

	// Use 'forwardPorts' to make a list of ports inside the container available locally.
	// "forwardPorts": [],

	// Use 'postCreateCommand' to run commands after the container is created.
	"postCreateCommand": "python docs/assets/greeting.py",

	// Configure tool-specific properties.
	// "customizations": {},

	// Uncomment to connect as root instead. More info: https://aka.ms/dev-containers-non-root.
	// "remoteUser": "root"
}

================
File: docs/assets/greeting.py
================
def blue(_str):
    return f"\033[0;33m{_str}\033[0m"

print(f"""
Hello 😁 ! Use the terminal to code!

1. Start the dev server by running  {blue("$ npm run start")}
2. You can find a video tutorial and explanation on the README.md file.
3. Always read the terminal output, it's your best tool for debugging!
""")

================
File: src/js/component/styles/Navbar.module.css
================
.logo {
    height: 100px;
    width: 150px;
}

================
File: src/js/component/styles/People.module.css
================
.img {
    width: 400px;
    height: 200px;
    object-fit: cover;
};

================
File: src/js/component/styles/Planets.module.css
================
.img {
    width: 400px;
    height: 200px;
    object-fit: cover;
};

================
File: src/js/component/styles/Vehicles.module.css
================
.img {
    width: 400px;
    height: 200px;
    object-fit: cover;
};

================
File: src/js/component/Favorites.jsx
================
import React, {useContext, useEffect} from "react";
import { Context } from "../store/appContext";

const Favorites = () => {
    const {store, actions} = useContext(Context);

    useEffect(()=>{
        actions.deleteFavorite();
    },[])

    return(
        <div className="btn-group">
            <button type="button" className="btn btn-warning dropdown-toggle fs-5 fw-semibold" data-bs-toggle="dropdown">
                Favorites({store.favorites.length})
            </button>
            <ul className="dropdown-menu dropdown-menu-end p-2 dropdown-menu-dark">
                {
                    store.favorites.map((item,index)=>(
                        <li key={index} className="list-group-item d-flex justify-content-between align-items-center"><a className="dropdown-item" href="#">{item}</a><i className="fa-solid fa-trash-can" onClick={()=>actions.deleteFavorite(item)}></i></li>
                    ))
                }
            </ul>
        </div>
    );
};

export default Favorites

================
File: src/js/component/Navbar.jsx
================
import React from "react";
import { Link } from "react-router-dom";
import Favorites from "../component/Favorites.jsx";
import style from "./styles/Navbar.module.css"

const Navbar = () => {

	return (
        <nav className="nav d-flex flex-column align-items-center flex-sm-row bg-black px-5 sticky-sm-top" id="navbar-example2">
            <Link to="/">
                <img className={`rounded-3 ${style.logo}`} src="https://brandemia.org/contenido/subidas/2021/05/portada-starwars-imagenes-brandemia-blog-1000x670.jpg" alt="" />
            </Link>
            <a className="flex-sm-fill text-sm-center nav-link text-white fs-5" href="#Characters">Characters</a>
            <a className="flex-sm-fill text-sm-center nav-link text-white fs-5" href="#Planets">Planets</a>
            <a className="flex-sm-fill text-sm-center nav-link text-white fs-5" href="#Vehicles">Vehicles</a>
            <Favorites />
        </nav>
	);
};

export default Navbar;

================
File: src/js/component/People.jsx
================
import React, { useContext, useEffect } from "react";
import { Context } from "../store/appContext";
import { Link } from "react-router-dom";
import style from "./styles/People.module.css"

const People = () => {
    const { store, actions } = useContext(Context);
    // console.log(store.peopleList)

    useEffect(() => {
        actions.getPeopleList();
        actions.getPeopleCard()
    }, [])
    return (
        <div className="d-flex flex-row overflow-auto">
            {
                store.peopleList.map((item, index) => (
                    <div key={index} className="card my-2 me-2" style={{ minWidth: "400px" }}>
                        <img src={`https://starwars-visualguide.com/assets/img/characters/${item.uid}.jpg`} className={`card-img-top ${style.img}`} alt="..." />
                        <div className="card-body text-start">
                            <h5 className="card-title text-center fw-bold fs-4">{item.name}</h5>
                            <p className="card-text"><b>Gender:</b> {store.peopleCard[index]?.gender}</p>
                            <p className="card-text"><b>Hair color:</b> {store.peopleCard[index]?.hair_color}</p>
                            <p className="card-text"><b>Eye color:</b> {store.peopleCard[index]?.eye_color}</p>
                            <div className="d-flex justify-content-between">
                                <Link to={`/DetailsCharacters/${item.uid}`}>
                                    <a href="#" className="btn btn-outline-dark fw-bold">Learn more!</a>
                                </Link>
                                <a href="#" className="btn btn-outline-warning" onClick={() => actions.addFavorites(item.name)}><i className="fa-solid fa-heart"></i></a>
                            </div>
                        </div>
                    </div>
                ))
            }
        </div>
    );
};

export default People;

================
File: src/js/component/Planets.jsx
================
import React, {useContext, useEffect} from "react";
import { Context } from "../store/appContext";
import { Link } from "react-router-dom";
import style from "./styles/Planets.module.css"

const Planets = () => {
    const {store, actions} = useContext(Context);
    // console.log(store.planetsList);

    useEffect(()=>{
        actions.getPlanetsList()
        actions.getPlanetsCard()
    },[])
	return (
		<div className="d-flex flex-row overflow-auto">
            {
                store.planetsList.map((item, index) => (
                    <div key={index} className="card my-2 me-2" style={{ minWidth: "400px"}}>
                        <img src={`https://starwars-visualguide.com/assets/img/planets/${item.uid}.jpg`} className={`card-img-top ${style.img}`} alt="..."/>
                        <div className="card-body text-start">
                            <h5 className="card-title text-center fw-bold fs-4">{item.name}</h5>
                            <p className="card-text"><b>Population:</b> {store.planetsCard[index]?.population}</p>
                            <p className="card-text"><b>Terrain:</b> {store.planetsCard[index]?.terrain}</p>
                            <p className="card-text"><b>Gravity:</b> {store.planetsCard[index]?.gravity}</p>
                            <div className="d-flex justify-content-between">
                                <Link to={`/DetailsPlanets/${item.uid}`}>
                                    <a href="#" className="btn btn-outline-dark fw-bold">Learn more!</a>
                                </Link>
                                <a href="#" className="btn btn-outline-warning" onClick={()=>actions.addFavorites(item.name)}><i className="fa-solid fa-heart"></i></a>
                            </div>
                        </div>
                    </div>
                ))
            }
		</div>
	);
};

export default Planets;

================
File: src/js/component/Vehicles.jsx
================
import React, { useContext, useEffect } from "react";
import { Context } from "../store/appContext";
import { Link } from "react-router-dom";
import style from "./styles/Vehicles.module.css"

const Vehicles = () => {
    const { store, actions } = useContext(Context);
    // console.log(store.vehiclesList);

    useEffect(() => {
        actions.getVehiclesList()
        actions.getVehiclesCard()
    }, [])
    return (
        <div className="d-flex flex-row overflow-auto">
            {
                store.vehiclesList.map((item, index) => (
                    <div key={index} className="card my-2 me-2" style={{ minWidth: "400px" }}>
                        <img src={`https://starwars-visualguide.com/assets/img/vehicles/${item.uid}.jpg`} className={`card-img-top ${style.img}`} alt="..."/>
                        <div className="card-body text-start">
                            <h5 className="card-title text-center fw-bold fs-4">{item.name}</h5>
                            <p className="card-text"><b>Vehicle Class:</b> {store.vehiclesCard[index]?.vehicle_class}</p>
                            <p className="card-text"><b>Manufacturer:</b> {store.vehiclesCard[index]?.manufacturer}</p>
                            <p className="card-text"><b>Cost in Credits:</b> {store.vehiclesCard[index]?.cost_in_credits}</p>
                            <div className="d-flex justify-content-between">
                                <Link to={`/DetailsVehicles/${item.uid}`}>
                                    <a href="#" className="btn btn-outline-dark fw-bold">Learn more!</a>
                                </Link>
                                <a href="#" className="btn btn-outline-warning" onClick={() => actions.addFavorites(item.name)}><i className="fa-solid fa-heart"></i></a>
                            </div>
                        </div>
                    </div>
                ))
            }
        </div>
    );
};

export default Vehicles;

================
File: src/js/store/appContext.js
================
import React, { useState, useEffect } from "react";
import getState from "./flux.js";

// Don't change, here is where we initialize our context, by default it's just going to be null.
export const Context = React.createContext(null);

// This function injects the global store to any view/component where you want to use it, we will inject the context to layout.js, you can see it here:
// https://github.com/4GeeksAcademy/react-hello-webapp/blob/master/src/js/layout.js#L35
const injectContext = PassedComponent => {
	const StoreWrapper = props => {
		//this will be passed as the contenxt value
		const [state, setState] = useState(
			getState({
				getStore: () => state.store,
				getActions: () => state.actions,
				setStore: updatedStore =>
					setState({
						store: Object.assign(state.store, updatedStore),
						actions: { ...state.actions }
					})
			})
		);

		useEffect(() => {
			/**
			 * EDIT THIS!
			 * This function is the equivalent to "window.onLoad", it only runs once on the entire application lifetime
			 * you should do your ajax requests or fetch api requests here. Do not use setState() to save data in the
			 * store, instead use actions, like this:
			 *
			 * state.actions.loadSomeData(); <---- calling this function from the flux.js actions
			 *
			 **/
		}, []);

		// The initial value for the context is not null anymore, but the current state of this component,
		// the context will now have a getStore, getActions and setStore functions available, because they were declared
		// on the state of this component
		return (
			<Context.Provider value={state}>
				<PassedComponent {...props} />
			</Context.Provider>
		);
	};
	return StoreWrapper;
};

export default injectContext;

================
File: src/js/store/flux.js
================
const getState = ({ getStore, getActions, setStore }) => {
	return {
		store: {
	
			peopleList: [], 
			characterId: {}, 
			peopleCard: [], 

			planetsList: [],
			planetId: {},
			planetsCard: [],
		
			vehiclesList: [],
			vehicleId: {},
			vehiclesCard: [],
			
			favorites: [],
		},
		actions: {
		
			getPeopleCard: async () => {
				try {
					let response = await fetch("https://swapi.dev/api/people/")
					let data = await response.json()
					setStore({ peopleCard: data.results })
					console.log(data.results);
					return
				} catch (error) {
					console.log(error)
					return
				}
			},

			getPeopleList: async () => {
				try {
					let response = await fetch("https://www.swapi.tech/api/people/")
					let data = await response.json()
					setStore({ peopleList: data.results })
					// console.log(data);
					return
				} catch (error) {
					console.log(error)
					return
				}
			},
		
			getCharacterId: async (id) => {
				try {
					let response = await fetch(`https://www.swapi.tech/api/people/${id}`)
					let data = await response.json()
					setStore({ characterId: data.result })
					// console.log(data);
					return
				} catch (error) {
					console.log(error)
					return
				}
			},

			getPlanetsCard: async () => {
				try {
					let response = await fetch("https://swapi.dev/api/planets/")
					let data = await response.json()
					setStore({ planetsCard: data.results })
					console.log(data.results);
					return
				} catch (error) {
					console.log(error)
					return
				}
			},
		
			getPlanetsList: async () => {
				try {
					let response = await fetch("https://www.swapi.tech/api/planets/")
					let data = await response.json()
					setStore({ planetsList: data.results })
					// console.log(data);
					return
				} catch (error) {
					console.log(error)
					return
				}
			},

			getPlanetId: async (id) => {
				try {
					let response = await fetch(`https://www.swapi.tech/api/planets/${id}`)
					let data = await response.json()
					setStore({ planetId: data.result })
					// console.log(data);
					return
				} catch (error) {
					console.log(error)
					return
				}
			},
	
			getVehiclesCard: async () => {
				try {
					let response = await fetch("https://swapi.dev/api/vehicles/")
					let data = await response.json()
					setStore({ vehiclesCard: data.results })
					console.log(data.results);
					return
				} catch (error) {
					console.log(error)
					return
				}
			},
	
			getVehiclesList: async () => {
				try {
					let response = await fetch("https://www.swapi.tech/api/vehicles/");
					let data = await response.json();
					setStore({ vehiclesList: data.results });
					// console.log(data);
					return
				} catch (error) {
					console.log(error);
					return
				}
			},
	
			getVehicleId: async (id) => {
				try {
					let response = await fetch(`https://www.swapi.tech/api/vehicles/${id}`);
					let data = await response.json();
					setStore({ vehicleId: data.result });
					// console.log(data);
					return
				} catch (error) {
					console.log(error);
					return
				}
			},

			addFavorites: (fav) => {
				const store = getStore();
				if (!store.favorites.includes(fav)) {
					setStore({ favorites: [...store.favorites, fav] });
				}
			},

			deleteFavorite: (fav) => {
				const store = getStore();
				let newFavorites = store.favorites.filter((item) => item !== fav)
				setStore({ favorites: newFavorites })
			},
		}
	};
};

export default getState;

================
File: src/js/views/CharacterDetails.js
================
import React, { useContext, useEffect } from "react";
import { Context } from "../store/appContext";
import { useParams } from "react-router";

const CharacterDetails = () => {
    const { store, actions } = useContext(Context)
    console.log("I am a new person", store.characterId);

    const params = useParams();
    // console.log(params);

    useEffect(() => {
        actions.getCharacterId(params.theid)
    }, [])
    return (
        <div className="py-3 px-5 w-100">
            <div className="card p-3" style={{ maxwidth: "540px" }}>
                <div className="row g-0">
                    <div className="col-md-4">
                        <img src={`https://starwars-visualguide.com/assets/img/characters/${params.theid}.jpg`} className="img-fluid rounded" alt="..." />
                    </div>
                    <div className="col-md-8 ps-5 pe-4">
                        <div className="card-body p-0">
                            <h5 className="card-title fw-semibold mb-5 display-1">{store.characterId.properties?.name}</h5>
                            <p className="card-text">{store.characterId.description}</p>
                            <p>Consectetur adipisicing elit. Aliquam quae, distinctio molestiae nam iusto inventore ad maxime corrupti consequatur quos cum pariatur facere, nemo doloribus. Soluta saepe eveniet eaque facere amet dolore, inventore ipsam. Est labore veritatis laborum deleniti rerum? Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quae, qui eum! Quasi quo exercitationem natus tenetur perspiciatis temporibus quam amet excepturi nesciunt doloribus porro soluta, eius tempore aperiam? Error eaque nostrum quibusdam quisquam, atque animi ullam quo vel at doloribus sit sed quaerat doloremque quidem, repellat sint explicabo qui in.</p>
                        </div>
                    </div>
                </div>
                <div className="row pt-2 border-top border-2 border-danger mt-3 text-center fs-5">
                    <div className="col">
                        <p><b>Name</b></p>
                        <p>{store.characterId.properties?.name}</p>
                    </div>
                    <div className="col">
                        <p><b>Birth Year</b></p>
                        <p>{store.characterId.properties?.birth_year}</p>
                    </div>
                    <div className="col">
                        <p><b>Gender</b></p>
                        <p>{store.characterId.properties?.gender}</p>
                    </div>
                    <div className="col">
                        <p><b>Height</b></p>
                        <p>{store.characterId.properties?.height}</p>
                    </div>
                    <div className="col">
                        <p><b>Skin Color</b></p>
                        <p>{store.characterId.properties?.skin_color}</p>
                    </div>
                    <div className="col">
                        <p><b>Eye Color</b></p>
                        <p>{store.characterId.properties?.eye_color}</p>
                    </div>
                </div>
            </div>
        </div>
    );
};

export default CharacterDetails;

================
File: src/js/views/Home.js
================
import React from "react";
import People from "../component/People.jsx"
import Planets from "../component/Planets.jsx"
import Vehicles from "../component/Vehicles.jsx"

const Home = () => {
    return(
        <div className="w-100">
            <div className="bg-body-tertiary py-3 px-5" data-bs-target="#navbar-example2" data-bs-root-margin="0px 0px -40%" data-bs-smooth-scroll="true" tabIndex="0">
                <h4 id="Characters" className="pt-3 fs-3 fw-bold text-danger">Characters</h4>
                <People />
                <h4 id="Planets" className="pt-3 fs-3 fw-bold text-danger">Planets</h4>
                <Planets/>
                <h4 id="Vehicles" className="pt-3 fs-3 fw-bold text-danger">Vehicles</h4>
                <Vehicles/>
            </div>
        </div> 
    );
};

export default Home

================
File: src/js/views/PlanetDetails.js
================
import React, {useContext, useEffect} from "react";
import { Context } from "../store/appContext";
import { useParams } from "react-router";

const PlanetsDetails = () => {
    const{store, actions} = useContext(Context)
    // console.log("I am a new planet", store.planetId);
    const params = useParams();
    // console.log(params);
    
    useEffect(()=>{
        actions.getPlanetId(params.theid)
    },[])
	return (
        <div className="py-3 px-5 w-100">
            <div className="card p-3" style={{maxwidth: "540px"}}>
                <div className="row g-0">
                    <div className="col-md-4">
                        <img src={`https://starwars-visualguide.com/assets/img/planets/${params.theid}.jpg`} className="img-fluid rounded" alt="..."/>
                    </div>
                    <div className="col-md-8 ps-5 pe-4">
                        <div className="card-body p-0">
                            <h5 className="card-title fw-semibold mb-5 display-1">{store.planetId.properties?.name}</h5>
                            <p className="card-text">{store.planetId.description}</p>
                            <p>Consectetur adipisicing elit. Aliquam quae, distinctio molestiae nam iusto inventore ad maxime corrupti consequatur quos cum pariatur facere, nemo doloribus. Soluta saepe eveniet eaque facere amet dolore, inventore ipsam. Est labore veritatis laborum deleniti rerum? Lorem, ipsum dolor sit amet consectetur adipisicing elit. Quae, qui eum! Quasi quo exercitationem natus tenetur perspiciatis temporibus quam amet excepturi nesciunt doloribus porro soluta, eius tempore aperiam? Error eaque nostrum quibusdam quisquam, atque animi ullam quo vel at doloribus sit sed quaerat doloremque quidem, repellat sint explicabo qui in.</p>
                        </div>
                    </div>
                </div>
                <div className="row pt-2 border-top border-2 border-danger mt-3 text-center fs-5">
                    <div className="col">
                        <p><b>Name</b></p>
                        <p>{store.planetId.properties?.name}</p>
                    </div>
                    <div className="col">
                        <p><b>Climate</b></p>
                        <p>{store.planetId.properties?.climate}</p>
                    </div>
                    <div className="col">
                        <p><b>Population</b></p>
                        <p>{store.planetId.properties?.population}</p>
                    </div>
                    <div className="col">
                        <p><b>Orbital Period</b></p>
                        <p>{store.planetId.properties?.orbital_period}</p>
                    </div>
                    <div className="col">
                        <p><b>Rotation Period</b></p>
                        <p>{store.planetId.properties?.rotation_period}</p>
                    </div>
                    <div className="col">
                        <p><b>Diameter</b></p>
                        <p>{store.planetId.properties?.diameter}</p>
                    </div>
                    <div className="col">
                        <p><b>Terrain</b></p>
                        <p>{store.planetId.properties?.terrain}</p>
                    </div>
                    <div className="col">
                        <p><b>Surface Water</b></p>
                        <p>{store.planetId.properties?.surface_water}</p>
                    </div>
                </div>
            </div>
		</div>
	);
};

export default PlanetsDetails;

================
File: src/js/views/VehicleDetails.js
================
import React from 'react';

export function VehicleDetailsPage() {
    return (
        <div>
            <h1>Welcome to Vehicle Details Page</h1>
        </div>
    )
}

================
File: src/js/index.js
================
//import react into the bundle
import React from 'react'
import {createRoot} from 'react-dom/client'

//include your index.scss file into the bundle
import "../styles/index.css";

//import your own components
import Layout from './layout.js'

//
const root = createRoot(document.querySelector("#app"))

//render your react application
root.render(<Layout/>)

================
File: src/js/layout.js
================
import React from "react";
import { BrowserRouter, Route, Routes } from "react-router-dom";
import injectContext from "./store/appContext";

import Home from "./views/Home"
import CharacterDetails from "./views/CharacterDetails.js";
import VehicleDetails from "./views/VehicleDetails.js";
import PlanetDetails from "./views/PlanetDetails.js";
import Navbar from "./component/Navbar.jsx";

//create your first component
const Layout = () => {
	//the basename is used when your project is published in a subdirectory and not in the root of the domain
	// you can set the basename on the .env file located at the root of this project, E.g: BASENAME=/react-hello-webapp/
	const basename = process.env.BASENAME || "";

	return (
		<div>
			<BrowserRouter basename={basename}>
					<Navbar />
					<Routes>
						<Route path="/" element={<Home />} />
						<Route path="/character/:characterId" element={<CharacterDetails />} />
						<Route path="/character/:planetId" element={<PlanetDetails />} />
						<Route path="/character/:vehicleId" element={<VehicleDetails />} />
						<Route path="*" element={<h1>Not found!</h1>} />
					</Routes>
			</BrowserRouter>
		</div>
	);
};

export default injectContext(Layout);

================
File: .env.example
================
BASENAME=/

================
File: .eslintrc
================
{
  "parser": "@babel/eslint-parser",
  "plugins": [
    "react"
  ],
  "env": {
    "browser": true,
    "es6": true
  },
  "extends": [ "plugin:react/recommended"],
  "rules": {
    "strict":0,
    "no-unused-vars": 0,
    "no-console": 1,
    "no-mixed-spaces-and-tabs": 0,
    "no-debugger": 0, 
    "semi": ["error", "always"],
    "allowImportExportEverywhere": false,
    "indent": "off",
    "react/jsx-indent": "off",
    "react/jsx-indent-props": "off",
    "comma-dangle": [1, { //when to use the last comma
        "arrays": "never",
        "objects": "never",
        "imports": "never",
        "exports": "never",
        "functions": "ignore",
    }],
    "react/prop-types": [2]
  }
}

================
File: .gitignore
================
# ignore all files starting with .
.*

# track this file .gitignore (i.e. do NOT ignore it)
!.gitignore
!.github
!.vscode
php_errorlog
.log

# track this file .gitignore (i.e. do NOT ignore it)
!composer.json
!webpack.config.js
!package.json
!webpack.production.js
!webpack.development.js

# track readme.md in the root (i.e. do NOT ignore it)
!README.md

# ignore OS generated files
ehthumbs.db
Thumbs.db

# ignore Editor files
*.sublime-project
*.sublime-workspace
*.komodoproject

# ignore log files and databases
*.log
*.sql
*.sqlite

# ignore compiled files
*.com
*.class
*.dll
*.exe
*.o
*.so

# ignore packaged files
*.7z
*.dmg
*.gz
*.iso
*.jar
*.rar
*.tar
*.zip

# ignore node/grunt dependency directories
node_modules/

public/

# ignore the dist directory were our bundle files are going to be
!.gitkeep
!.devcontainer
!.devcontainer/*
!.gitpod.yml
!.htaccess
!.eslintrc
!.env.example
.now
.vercel

================
File: .gitpod.yml
================
ports:
    - port: 3000
      onOpen: open-browser
tasks:
    - init: >
        npm install &&
        cp .env.example .env
      command: >
        python docs/assets/greeting.py

vscode:
  extensions:
    - esbenp.prettier-vscode

================
File: .htaccess
================
<IfModule mod_rewrite.c>

  RewriteEngine On
  RewriteBase /
  RewriteRule ^index\.html$ - [L]
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  RewriteCond %{REQUEST_FILENAME} !-l
  RewriteRule . /index.html [L]

</IfModule>

================
File: CHANGELOG.md
================
### 3 July 7, 2020

- Updated to React Router v5.2.0 with new Syntax and Hooks: No more usaged of the `component` property on the Route, new hooks useHistory and useLocation.

### Oct 23, 2020

- Added support for async/wait using the `@babel/plugin-transform-runtime` plugin. No more regenerator/runtime issue.
- Replaced now.json with vercel.json

### December 9, 2021

- Support for node 16 and droppped 14.
- Updated all libraries to the latest
- Now the prettier us being used as a vscode plugin instead.
- Dropped eslint (for now)

================
File: package.json
================
{
	"name": "react-hello-webapp",
	"engines": {
		"node": "16.x"
	},
	"version": "1.0.1",
	"description": "",
	"main": "index.js",
	"scripts": {
		"start": "webpack-dev-server --config webpack.dev.js --host 0.0.0.0 --port 3000",
		"build": "webpack --config webpack.prod.js",
		"deploy": "node deploy-to-github.js"
	},
	"author": {
		"name": "Alejandro Sanchez",
		"url": "http://alesanchezr.com/"
	},
	"contributors": [
		{
			"name": "Alejandro Sanchez",
			"url": "http://alesanchezr.com/"
		},
		{
			"name": "Ignacio Cordoba",
			"url": "http://github.com/nachovz"
		}
	],
	"license": "ISC",
	"devDependencies": {
		"@babel/cli": "^7.16.0",
		"@babel/core": "^7.16.0",
		"@babel/plugin-proposal-class-properties": "^7.16.0",
		"@babel/plugin-transform-runtime": "^7.16.4",
		"@babel/preset-env": "^7.16.4",
		"@babel/preset-react": "^7.16.0",
		"@babel/runtime": "^7.16.3",
		"babel-eslint": "^10.1.0",
		"babel-loader": "^8.2.3",
		"babel-plugin-transform-class-properties": "^6.24.1",
		"bc-console": "0.0.2",
		"css-loader": "^6.5.1",
		"dotenv-webpack": "^7.0.3",
		"envfile": "^6.17.0",
		"error-overlay-webpack-plugin": "^1.0.0",
		"eslint": "^8.4.0",
		"eslint-plugin-react": "^7.27.1",
		"eslint-webpack-plugin": "^3.1.1",
		"file-loader": "^6.2.0",
		"gh-pages": "^3.2.3",
		"html-loader": "^3.0.1",
		"html-webpack-plugin": "^5.5.0",
		"parse-github-url": "^1.0.2",
		"prettier": "^2.5.1",
		"remote-origin-url": "^2.0.0",
		"style-loader": "^3.3.1",
		"webpack": "^5.65.0",
		"webpack-cli": "^4.9.1",
		"webpack-dev-server": "^4.6.0",
		"webpack-merge": "^5.8.0"
	},
	"babel": {
		"presets": [
			"@babel/preset-env",
			"@babel/preset-react"
		],
		"plugins": [
			"@babel/plugin-proposal-class-properties",
			[
				"@babel/plugin-transform-runtime",
				{
					"regenerator": true
				}
			]
		]
	},
	"dependencies": {
		"prop-types": "^15.7.2",
		"query-string": "^7.0.1",
		"react": "^18.2.0",
		"react-dom": "^18.2.0",
		"react-icons": "^5.2.1",
		"react-polyfills": "0.0.1",
		"react-router": "^6.0.2",
		"react-router-dom": "^6.4.3"
	}
}

================
File: README.md
================
# WebApp boilerplate with React JS
[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io#https://github.com/4GeeksAcademy/react-hello-webapp.git)

<p align="center">
<a href="https://www.loom.com/share/f37c6838b3f1496c95111e515e83dd9b"><img src="https://github.com/4GeeksAcademy/react-hello-webapp/blob/master/src/img/how-to.png?raw=true" /></a>
</p>


### Requirements:
- Make sure you are using node version 10

1. Install the packages:
```
$ npm install
```
2. Create a .env file:
```
$ cp .env.example .env
```
3. Start coding! and the webpack dev server with live reload, for windows, mac, linux or Gitpod:

```bash
$ npm run start
```

### Styles
You can update the `styles/index.css` or create new `.css` files inside `styles/` and import them into your current scss or js files depending on your needs.

### Components
Add more files into your `./src/js/components` or styles folder as you need them and import them into your current files as needed.

**Note (New changes)**: Components have been converted into functions to support the use of hooks:
* Instead of a class component, we're using a `const` function.
* Class `constructor` and `state` have been replaced by `useState()` hooks.
* `componentDidMount()` was replaced by `useEffect({}, [])` - It runs at mount thanks to the second parameter (`[]`).
* `Actions` and `Store` still work the same way.

```jsx
// Previous "Class Oriented"
export class Demo extends React.Component {
	constructor(props) {
		super(props);

		this.state = getState('code here');
	}
}

// New "Functional Oriented"
export const Demo = () => (
	const [state, setState] = getState('code here'); //using the state (if needed)
  const { store, actions } = useContext(Context); // using the context (if needed)

);
```

💡Note: There is an example using the Context API inside `views/demo.js`;

### Views (Components)
Add more files into your `./src/js/views` and import them in `./src/js/layout.jsx`.

### Context
This boilerplate comes with a centralized general Context API. The file `./src/js/store/flux.js` has a base structure for the store, we encourage you to change it and adapt it to your needs.

React Context [docs](https://reactjs.org/docs/context.html)
BreathCode Lesson [view](https://content.breatheco.de/lesson/react-hooks-explained)

The `Provider` is already set. You can consume from any component using the useContext hook to get the `store` and `actions` from the Context. Check `/views/demo.js` to see a demo.

```jsx
import { Context } from "../store/appContext";
const MyComponentSuper = () => {
  //here you use useContext to get store and actions
  const { store, actions } = useContext(Context);
  return <div>{/* you can use your actions or store inside the html */}</div>
}
```

## Publish your website!

1. **Vercel:** The FREE recomended hosting provider is [vercel.com](https://vercel.com/), you can deploy in 1 minutes by typing the following 2 commands:

Login (you need to have an account):
```sh
$ npm i vercel -g && vercel login
```
Deploy:
```sh
$ vercel --prod
```
✎ Note: If you don't have an account just go to vercel.com, create a account and come back here.

![Vercel example procedure to deploy](https://github.com/4GeeksAcademy/react-hello-webapp/blob/4b530ba091a981d3916cc6e960e370decaf2e234/docs/deploy.png?raw=true)

2. **Github Pages:** This boilerplate is 100% compatible with the free github pages hosting.
To publish your website you need to push your code to your github repository and run the following command after:
```sh
$ npm run deploy
```
Note: You will need to [configure github pages for the branch gh-pages](https://help.github.com/articles/configuring-a-publishing-source-for-github-pages/#enabling-github-pages-to-publish-your-site-from-master-or-gh-pages)

## Contributors

This template was built as part of the 4Geeks Academy [Coding Bootcamp](https://4geeksacademy.com/us/coding-bootcamp) by [Alejandro Sanchez](https://twitter.com/alesanchezr) and many other contributors. Find out more about our [Full Stack Developer Course](https://4geeksacademy.com/us/coding-bootcamps/part-time-full-stack-developer), and [Data Science Bootcamp](https://4geeksacademy.com/us/coding-bootcamps/datascience-machine-learning).

================
File: template.html
================
<!DOCTYPE html>
<html class="h-100">
    <head>
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <meta charset="UTF-8">
        <title>Hello Rigo with Vanilla.js</title>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
        <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.2.0/css/all.css" integrity="sha384-hWVjflwFxL6sNzntih27bfxkr27PmbbK/iSvJ+a4+0owXq79v+lsFkW54bOGbiDQ" crossorigin="anonymous">
    </head>
    <body class="h-100">
        <div id="app" class="h-100"></div>
        <!-- Many of bootstrap components require the use of JavaScript to function -->
        <!-- Popper and BootStrap JS -->
        <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.10.2/dist/umd/popper.min.js" integrity="sha384-7+zCNj/IqJ95wo16oMtfsKbZ9ccEh31eOz1HGyDuCQ6wgnyJNSYdrPa03rtR1zdB" crossorigin="anonymous"></script>
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.min.js" integrity="sha384-QJHtvGhmr9XOIpI6YVutG+2QOK9T+ZnN4kzFN1RtK3zEFEIsxhlmWl5/YESvpZ13" crossorigin="anonymous"></script>
    </body>
</html>

================
File: vercel.json
================
{
  "version": 2,
  "builds": [
    {
      "src": "package.json",
      "use": "@now/static-build",
      "config": { "distDir": "public" }
    }
  ],
  
  "routes": [
    {
      "src":"/.*bundle.js$",
      "headers": { "cache-control": "s-maxage=31536000,immutable" },
      "dest":"/bundle.js"
    },
    {
      "src":"/(.+)\\.([a-zA-Z]{2,4})$",
      "headers": { "cache-control": "s-maxage=31536000,immutable" },
      "dest":"/$1.$2"
    },
    {
      "src": "/(.*)",
      "headers": { "cache-control": "s-maxage=0" },
      "dest": "/index.html"
    }
  ]
}

================
File: webpack.common.js
================
const webpack = require('webpack');
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const Dotenv = require('dotenv-webpack');

module.exports = {
  entry: [
    './src/js/index.js'
  ],
  output: {
    filename: 'bundle.js',
    path: path.resolve(__dirname, 'public'),
    publicPath: '/'
  },
  module: {
    rules: [
        {
          test: /\.(js|jsx)$/,
          exclude: /node_modules/,
          use: ['babel-loader']
        },
        {
          test: /\.(css)$/, use: [{
              loader: "style-loader" // creates style nodes from JS strings
          }, {
              loader: "css-loader" // translates CSS into CommonJS
          }]
        }, //css only files
        {
          test: /\.(png|svg|jpg|gif|jpeg|webp)$/, use: {
            loader: 'file-loader',
            options: { name: '[name].[ext]' }
          }
        }, //for images
        { test: /\.woff($|\?)|\.woff2($|\?)|\.ttf($|\?)|\.eot($|\?)|\.svg($|\?)/, use: ['file-loader'] } //for fonts
    ]
  },
  resolve: {
    extensions: ['*', '.js']
  },
  plugins: [
    new HtmlWebpackPlugin({
        favicon: '4geeks.ico',
        template: 'template.html'
    }),
    new Dotenv({ safe: true, systemvars: true })
  ]
};

================
File: webpack.dev.js
================
const path = require('path');
const webpack = require('webpack');
const { merge } = require('webpack-merge');
const common = require('./webpack.common.js');

const port = 3000;
let publicUrl = `ws://localhost:${port}/ws`;

//only for gitpod
if(process.env.GITPOD_WORKSPACE_URL){
  const [schema, host] = process.env.GITPOD_WORKSPACE_URL.split('://');
  publicUrl = `wss://${port}-${host}/ws`;
}

//only for codespaces
if(process.env.CODESPACE_NAME){
  publicUrl = `wss://${process.env.CODESPACE_NAME}-${port}.preview.app.github.dev/ws`;
}

module.exports = merge(common, {
    mode: 'development',
    devtool: 'cheap-module-source-map',
    devServer: {
        port,
        hot: true,
        allowedHosts: "all",
        historyApiFallback: true,
        static: {
          directory: path.resolve(__dirname, "dist"),
        },
        client: {
          webSocketURL: publicUrl
        },
    },
    plugins: []
});

================
File: webpack.prod.js
================
const { merge } = require('webpack-merge');
const common = require('./webpack.common.js');
const Dotenv = require('dotenv-webpack');
module.exports = merge(common, {
    mode: 'production',
    output: {
        publicPath: './'
    },
    plugins: [
        new Dotenv({
            safe: true,
            systemvars: true
        })
    ]
});
